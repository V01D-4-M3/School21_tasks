        -:    0:Source:s21_matrix/s21_eq_matrix.c
        -:    1:#include "../s21_matrix.h"
        -:    2:
function are_matrices_valid called 12 returned 100% blocks executed 100%
       12:    3:static int are_matrices_valid(matrix_t *A, matrix_t *B) {
       12:    4:  int result =
       12:    5:      (A != NULL && B != NULL && A->matrix != NULL && B->matrix != NULL);
       12:    5-block  0
branch  0 taken 83% (fallthrough)
branch  1 taken 17%
       10:    5-block  1
branch  2 taken 90% (fallthrough)
branch  3 taken 10%
        9:    5-block  2
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
        9:    5-block  3
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
        9:    5-block  4
        3:    5-block  5
       12:    6:  return result;
       12:    6-block  0
        -:    7:}
        -:    8:
function have_same_dimensions called 9 returned 100% blocks executed 100%
        9:    9:static int have_same_dimensions(matrix_t *A, matrix_t *B) {
        9:   10:  int result = (A->rows == B->rows && A->columns == B->columns);
        9:   10-block  0
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
        8:   10-block  1
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        8:   10-block  2
        1:   10-block  3
        9:   11:  return result;
        9:   11-block  0
        -:   12:}
        -:   13:
function compare_matrix_elements called 8 returned 100% blocks executed 100%
        8:   14:static int compare_matrix_elements(matrix_t *A, matrix_t *B) {
        8:   15:  int result = EQUAL;
       19:   16:  for (int i = 0; i < A->rows && result == EQUAL; i++) {
        8:   16-block  0
       11:   16-block  1
       19:   16-block  2
branch  0 taken 58% (fallthrough)
branch  1 taken 42%
       11:   16-block  3
branch  2 taken 100%
branch  3 taken 0% (fallthrough)
       26:   17:    for (int j = 0; j < A->columns; j++) {
       11:   17-block  0
       15:   17-block  1
       26:   17-block  2
branch  0 taken 65%
branch  1 taken 35% (fallthrough)
       17:   18:      if (fabs(A->matrix[i][j] - B->matrix[i][j]) > 1e-7) {
       17:   18-block  0
branch  0 taken 12% (fallthrough)
branch  1 taken 88%
        2:   19:        result = NOT_EQUAL;
        2:   20:        break;
        2:   20-block  0
        -:   21:      }
        -:   22:    }
        -:   23:  }
        8:   24:  return result;
        8:   24-block  0
        -:   25:}
        -:   26:
function s21_eq_matrix called 12 returned 100% blocks executed 100%
       12:   27:int s21_eq_matrix(matrix_t *A, matrix_t *B) {
       12:   28:  int status = NOT_EQUAL;
        -:   29:
       12:   30:  if (are_matrices_valid(A, B)) {
       12:   30-block  0
call    0 returned 100%
branch  1 taken 75% (fallthrough)
branch  2 taken 25%
        9:   31:    if (have_same_dimensions(A, B)) {
        9:   31-block  0
call    0 returned 100%
branch  1 taken 89% (fallthrough)
branch  2 taken 11%
        8:   32:      status = compare_matrix_elements(A, B);
        8:   32-block  0
call    0 returned 100%
        -:   33:    } else {
        1:   34:      status = NOT_EQUAL;
        1:   34-block  0
        -:   35:    }
        -:   36:  }
        -:   37:
       12:   38:  return status;
       12:   38-block  0
        -:   39:}
