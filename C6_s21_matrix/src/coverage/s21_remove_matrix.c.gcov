        -:    0:Source:s21_matrix/s21_remove_matrix.c
        -:    1:#include "../s21_matrix.h"
        -:    2:
function should_cleanup called 94 returned 100% blocks executed 100%
       94:    3:static int should_cleanup(matrix_t *A) {
       94:    4:  return (A != NULL && A->matrix != NULL);
       94:    4-block  0
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
       93:    4-block  1
branch  2 taken 99% (fallthrough)
branch  3 taken 1%
       92:    4-block  2
        2:    4-block  3
       94:    4-block  4
        -:    5:}
        -:    6:
function free_matrix_rows called 92 returned 100% blocks executed 100%
       92:    7:static void free_matrix_rows(matrix_t *A) {
     1863:    8:  for (int i = 0; i < A->rows; i++) {
       92:    8-block  0
     1863:    8-block  1
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
     1771:    9:    free(A->matrix[i]);
     1771:    9-block  0
        -:   10:  }
       92:   11:}
        -:   12:
function reset_matrix called 92 returned 100% blocks executed 100%
       92:   13:static void reset_matrix(matrix_t *A) {
       92:   14:  free(A->matrix);
       92:   15:  A->matrix = NULL;
       92:   16:  A->rows = 0;
       92:   17:  A->columns = 0;
       92:   18:}
        -:   19:
function s21_remove_matrix called 94 returned 100% blocks executed 100%
       94:   20:void s21_remove_matrix(matrix_t *A) {
       94:   21:  if (should_cleanup(A)) {
       94:   21-block  0
call    0 returned 100%
branch  1 taken 98% (fallthrough)
branch  2 taken 2%
       92:   22:    free_matrix_rows(A);
       92:   22-block  0
call    0 returned 100%
       92:   23:    reset_matrix(A);
call    0 returned 100%
        -:   24:  }
       94:   25:}
