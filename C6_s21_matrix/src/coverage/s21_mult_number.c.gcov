        -:    0:Source:s21_matrix/s21_mult_number.c
        -:    1:#include "../s21_matrix.h"
        -:    2:
function validate_mult_number_input called 5 returned 100% blocks executed 100%
        5:    3:static int validate_mult_number_input(const matrix_t *A, const matrix_t *result) {
        5:    4:    return (A != NULL && result != NULL && A->matrix != NULL);
        5:    4-block  0
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        4:    4-block  1
branch  2 taken 75% (fallthrough)
branch  3 taken 25%
        3:    4-block  2
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
        3:    4-block  3
        2:    4-block  4
        5:    4-block  5
        -:    5:}
        -:    6:
function create_result_matrix called 3 returned 100% blocks executed 100%
        3:    7:static int create_result_matrix(const matrix_t *A, matrix_t *result) {
        3:    8:    return s21_create_matrix(A->rows, A->columns, result);
        3:    8-block  0
call    0 returned 100%
        -:    9:}
        -:   10:
function multiply_matrix_by_number called 3 returned 100% blocks executed 100%
        3:   11:static void multiply_matrix_by_number(const matrix_t *A, double number, matrix_t *result) {
       10:   12:    for (int i = 0; i < A->rows; i++) {
        3:   12-block  0
        7:   12-block  1
       10:   12-block  2
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
       26:   13:        for (int j = 0; j < A->columns; j++) {
        7:   13-block  0
       26:   13-block  1
branch  0 taken 73%
branch  1 taken 27% (fallthrough)
       19:   14:            result->matrix[i][j] = A->matrix[i][j] * number;
       19:   14-block  0
        -:   15:        }
        -:   16:    }
        3:   17:}
        -:   18:
function s21_mult_number called 5 returned 100% blocks executed 100%
        5:   19:int s21_mult_number(matrix_t *A, double number, matrix_t *result) {
        5:   20:    int status = OK;
        -:   21:
        5:   22:    if (!validate_mult_number_input(A, result)) {
        5:   22-block  0
call    0 returned 100%
branch  1 taken 40% (fallthrough)
branch  2 taken 60%
        2:   23:        status = INCORRECT_MATRIX;
        2:   23-block  0
        -:   24:    } else {
        3:   25:        status = create_result_matrix(A, result);
        3:   25-block  0
call    0 returned 100%
        3:   26:        if (status == OK) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        3:   27:            multiply_matrix_by_number(A, number, result);
        3:   27-block  0
call    0 returned 100%
        -:   28:        }
        -:   29:    }
        -:   30:
        5:   31:    return status;
        5:   31-block  0
        -:   32:}
