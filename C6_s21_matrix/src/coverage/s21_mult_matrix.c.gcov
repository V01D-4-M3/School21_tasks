        -:    0:Source:s21_matrix/s21_mult_matrix.c
        -:    1:#include "../s21_matrix.h"
        -:    2:
function are_dimensions_compatible_for_multiplication called 2 returned 100% blocks executed 100%
        2:    3:static int are_dimensions_compatible_for_multiplication(const matrix_t *A, const matrix_t *B) {
        2:    4:    return (A->columns == B->rows);
        2:    4-block  0
        -:    5:}
        -:    6:
function create_multiplication_result_matrix called 1 returned 100% blocks executed 100%
        1:    7:static int create_multiplication_result_matrix(const matrix_t *A, const matrix_t *B, matrix_t *result) {
        1:    8:    return s21_create_matrix(A->rows, B->columns, result);
        1:    8-block  0
call    0 returned 100%
        -:    9:}
        -:   10:
function multiply_matrices called 1 returned 100% blocks executed 100%
        1:   11:static void multiply_matrices(const matrix_t *A, const matrix_t *B, matrix_t *result) {
        3:   12:    for (int i = 0; i < A->rows; i++) {
        1:   12-block  0
        2:   12-block  1
        3:   12-block  2
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        6:   13:        for (int j = 0; j < B->columns; j++) {
        2:   13-block  0
        4:   13-block  1
        6:   13-block  2
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        4:   14:            result->matrix[i][j] = 0.0;
       16:   15:            for (int k = 0; k < A->columns; k++) {
        4:   15-block  0
       16:   15-block  1
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
       12:   16:                result->matrix[i][j] += A->matrix[i][k] * B->matrix[k][j];
       12:   16-block  0
        -:   17:            }
        -:   18:        }
        -:   19:    }
        1:   20:}
        -:   21:
function s21_mult_matrix called 2 returned 100% blocks executed 91%
        2:   22:int s21_mult_matrix(matrix_t *A, matrix_t *B, matrix_t *result) {
        2:   23:    int status = OK;
        -:   24:
        2:   25:    if (!is_valid_input(A, B, result)) {
        2:   25-block  0
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   26:        status = INCORRECT_MATRIX;
    %%%%%:   26-block  0
        2:   27:    } else if (!are_dimensions_compatible_for_multiplication(A, B)) {
        2:   27-block  0
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
        1:   28:        status = CALCULATION_ERROR;
        1:   28-block  0
        -:   29:    } else {
        1:   30:        status = create_multiplication_result_matrix(A, B, result);
        1:   30-block  0
call    0 returned 100%
        1:   31:        if (status == OK) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   32:            multiply_matrices(A, B, result);
        1:   32-block  0
call    0 returned 100%
        -:   33:        }
        -:   34:    }
        -:   35:
        2:   36:    return status;
        2:   36-block  0
        -:   37:}
